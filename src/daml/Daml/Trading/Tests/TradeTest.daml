module Daml.Trading.Tests.TradeTest where 

import DA.Set as Set (fromList)
import Daml.Script 

import Daml.Finance.Interface.Types.Common (InstrumentKey(..), AccountKey(..), Id(..))
import Daml.Finance.Interface.Settlement.Factory qualified as Factory (I)

import Daml.Finance.Settlement.Factory (Factory(..))

import Daml.Trading.Account.CreateAccount qualified as CreateAccount
import Daml.Trading.Account.Account qualified as Account
import Daml.Trading.Cash.CreditCashAccount qualified as CreditCashAccount
import Daml.Trading.Cash.CashTransfer qualified as CashTransfer
import Daml.Trading.Nft.Nft qualified as Nft 
import Daml.Trading.Service.Service qualified as Service 
import Daml.Trading.Service.Trade qualified as Trade 
import Daml.Trading.Scripts.UserSetup qualified as UserSetup (createUsers)
import Daml.Trading.Scripts.HoldingSetup qualified as HoldingSetup (initialize, instrumentData) 

setup: Script () 
setup = do 
  (public, admin, cashInstrument, accountFactoryCid, 
    cashHoldingFactoryCid, nftHoldingFactoryCid, instrumentFactoryCid) <- HoldingSetup.initialize 
  [alice, bob] <- UserSetup.createUsers public ["Alice", "Bob"]

  adminRequestCid <- submit admin do 
    createCmd CreateAccount.Request 
      with 
        owner = admin 
        custodian = admin 
        accountType = Account.Admin 
        username = "admin" 
        realName = "Platform Admin" 
        passportNumber = "111111" 
        nationalId = "" 
        address  = "Unknown" 
  (adminAccountCid, _) <- submit admin $ exerciseCmd adminRequestCid CreateAccount.Request_Accept 
  adminAccountCid <- submit admin $ exerciseCmd adminAccountCid Account.Create_Cash_Account 
    with 
      description = "Admin Cash Account" 
      accountFactoryCid
      holdingFactoryCid = cashHoldingFactoryCid
      observers = [] 
  adminAccountCid <- submit admin $ exerciseCmd adminAccountCid Account.Create_Nft_Account 
    with 
      description = "Admin Nft Account" 
      accountFactoryCid
      holdingFactoryCid = nftHoldingFactoryCid
      instrumentFactoryCid
      observers = [] 

  aliceRequestCid <- submit alice do
    createCmd CreateAccount.Request
      with
        owner = alice
        custodian = admin
        accountType = Account.Retail 
        username = "alice" 
        realName = "Alice Ackerson" 
        passportNumber = "222222" 
        nationalId = "" 
        address  = "New York" 
  (aliceAccountCid, aliceServiceCid) <- submit admin $ exerciseCmd aliceRequestCid CreateAccount.Request_Accept
  aliceAccountCid <- submit admin $ exerciseCmd aliceAccountCid Account.Create_Cash_Account 
    with 
      description = "Alice Cash Account"
      accountFactoryCid = accountFactoryCid
      holdingFactoryCid = cashHoldingFactoryCid
      observers = [bob]

  bobRequestCid <- submit bob do
    createCmd CreateAccount.Request
      with
        owner = bob
        custodian = admin
        accountType = Account.Retail 
        username = "bob" 
        realName = "Bob Bader" 
        passportNumber = "" 
        nationalId = "333333" 
        address  = "Boston" 
  (bobAccountCid, bobServiceCid) <- submit admin $ exerciseCmd bobRequestCid CreateAccount.Request_Accept 
  bobAccountCid <- submit admin $ exerciseCmd bobAccountCid Account.Create_Nft_Account 
    with 
      description = "Bob Nft Account"
      accountFactoryCid = accountFactoryCid
      holdingFactoryCid = nftHoldingFactoryCid 
      instrumentFactoryCid = instrumentFactoryCid
      observers = [alice]

  let 
    (instrumentId, instrumentVersion) = HoldingSetup.instrumentData
    aliceAccountKey = AccountKey with custodian = admin, owner = alice, id = Id Account.cashLabel
    bobAccountKey = AccountKey with custodian = admin, owner = bob, id = Id Account.nftLabel

  aliceRequestCid <- submit alice do
    createCmd CreditCashAccount.Request
      with
        owner = alice
        custodian = admin
        instrument = InstrumentKey with issuer = admin; depository = admin; id = instrumentId; version = instrumentVersion
        amount = 1000.0

  aliceCashHoldingCid <- submit admin do exerciseCmd aliceRequestCid CreditCashAccount.Accept

  nftIssueRequestCid <- submit bob do 
    createCmd Nft.Request 
      with 
        owner = bob 
        admin 
        pictureName = "Picture" 
        pictureType = Nft.Landscape 
        pictureDescription = "Picture Description" 
        rarity = Nft.Rare 
        royaltyRate = 0.025 
        initialPrice = 100.0

  settlementFactoryCid <- toInterfaceContractId @Factory.I <$> submit admin do
    createCmd Factory
      with
        provider = admin
        observers = Set.fromList [alice, bob] 
  let 
    nftKey = InstrumentKey with depository = admin, issuer = admin, id = Id "Picture", version = Nft.nftVersion

  tradeCid <- submit alice $ exerciseCmd aliceServiceCid Service.Create_Trade with 
    sellerNftAccKey = bobAccountKey 
    cashCid = aliceCashHoldingCid 
    amount = 800.0 
    nftKey 
    settlementFactoryCid 

  submit bob $ exerciseCmd tradeCid Trade.Accept 

  pure ()
