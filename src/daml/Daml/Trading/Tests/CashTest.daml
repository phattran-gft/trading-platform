module Daml.Trading.Tests.CashTest where 

import Daml.Script 

import Daml.Finance.Interface.Types.Common (InstrumentKey(..), AccountKey(..), Id(..))

import Daml.Trading.Account.Account qualified as CreateAccount
import Daml.Trading.Cash.CreditCashAccount qualified as CreditCashAccount
import Daml.Trading.Cash.CashTransfer qualified as CashTransfer
import Daml.Trading.Scripts.UserSetup qualified as UserSetup (createUsers)
import Daml.Trading.Scripts.CashSetup qualified as CashSetup (initialize, instrumentData) 

cashLabel = "Cash"
nftLabel = "Nft"

setup: Script () 
setup = do 
  (public, admin, cashInstrument, accountFactoryCid, cashHoldingFactoryCid, nftHoldingFactoryCid) <- CashSetup.initialize 
  [alice] <- UserSetup.createUsers public ["Alice"]

  adminRequestCid <- submit admin do 
    createCmd CreateAccount.Request 
      with 
        owner = admin 
        custodian = admin 
        accountType = CreateAccount.Admin 
        username = "admin" 
        realName = "Platform Admin" 
        passportNumber = "111111" 
        nationalId = "" 
        address  = "Unknown" 
  adminAccountCid <- submit admin $ exerciseCmd adminRequestCid CreateAccount.Request_Accept

  adminAccountCid <- submit admin $ exerciseCmd adminAccountCid CreateAccount.Create_Cash_Account 
    with 
      description = "Admin Cash Account" 
      accountFactoryCid
      holdingFactoryCid = cashHoldingFactoryCid
      observers = [] 

  adminAccountCid <- submit admin $ exerciseCmd adminAccountCid CreateAccount.Create_Nft_Account 
    with 
      description = "Admin Nft Account" 
      accountFactoryCid
      holdingFactoryCid = cashHoldingFactoryCid
      observers = [] 
  
  let 
    (instrumentId, instrumentVersion) = CashSetup.instrumentData
    adminAccountKey = AccountKey with custodian = admin, owner = admin, id = Id cashLabel

  adminCreditCid <- submit admin do
    createCmd CreditCashAccount.Request
      with
        owner = admin
        custodian = admin
        instrument = cashInstrument
        amount = 100000000.0
  adminAccountCid <- submit admin do exerciseCmd adminCreditCid CreditCashAccount.Accept

  aliceRequestCid <- submit alice do
    createCmd CreateAccount.Request
      with
        owner = alice
        custodian = admin
        accountType = CreateAccount.Retail 
        username = "alice" 
        realName = "Alice Ackerson" 
        passportNumber = "222222" 
        nationalId = "" 
        address  = "New York" 
  aliceAccountCid <- submit admin $ exerciseCmd aliceRequestCid CreateAccount.Request_Accept
  aliceAccountCid <- submit admin $ exerciseCmd aliceAccountCid CreateAccount.Create_Cash_Account 
    with 
      description = "Alice Cash Account"
      accountFactoryCid = accountFactoryCid
      holdingFactoryCid = cashHoldingFactoryCid
      observers = []

  let 
    (instrumentId, instrumentVersion) = CashSetup.instrumentData
    aliceAccountKey = AccountKey with custodian = admin, owner = alice, id = Id cashLabel

  aliceRequestCid <- submit alice do
    createCmd CashTransfer.Request
      with
        receiverAccount = aliceAccountKey
        instrument = cashInstrument
        amount = 10000.0
        currentOwner = admin

  aliceCashHoldingCid <- submitMulti [admin] [public] do exerciseCmd aliceRequestCid CashTransfer.Accept with holdingCid = adminAccountCid

  pure()