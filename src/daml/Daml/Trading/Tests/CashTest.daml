module Daml.Trading.Tests.CashTest where 

import Daml.Script 

import Daml.Finance.Interface.Types.Common (InstrumentKey(..), AccountKey(..), Id(..))

import Daml.Trading.Account.Account qualified as CreateAccount
import Daml.Trading.Cash.CreditCashAccount qualified as CreditCashAccount
import Daml.Trading.Cash.CashTransfer qualified as CashTransfer
import Daml.Trading.Scripts.UserSetup qualified as UserSetup (createUsers)
import Daml.Trading.Scripts.HoldingSetup qualified as HoldingSetup (initialize, instrumentData) 

setup: Script () 
setup = do 
  (public, admin, cashInstrument, accountFactoryCid, 
    cashHoldingFactoryCid, nftHoldingFactoryCid, instrumentFactoryCid) <- HoldingSetup.initialize 
  [alice, bob] <- UserSetup.createUsers public ["Alice", "Bob"]

  aliceRequestCid <- submit alice do
    createCmd CreateAccount.Request
      with
        owner = alice
        custodian = admin
        accountType = CreateAccount.Retail 
        username = "alice" 
        realName = "Alice Ackerson" 
        passportNumber = "222222" 
        nationalId = "" 
        address  = "New York" 
  aliceAccountCid <- submit admin $ exerciseCmd aliceRequestCid CreateAccount.Request_Accept
  aliceAccountCid <- submit admin $ exerciseCmd aliceAccountCid CreateAccount.Create_Cash_Account 
    with 
      description = "Alice Cash Account"
      accountFactoryCid = accountFactoryCid
      holdingFactoryCid = cashHoldingFactoryCid
      observers = []

  bobRequestCid <- submit bob do
    createCmd CreateAccount.Request
      with
        owner = bob
        custodian = admin
        accountType = CreateAccount.Retail 
        username = "bob" 
        realName = "Bob Bader" 
        passportNumber = "" 
        nationalId = "333333" 
        address  = "Boston" 
  bobAccountCid <- submit admin $ exerciseCmd bobRequestCid CreateAccount.Request_Accept 
  bobAccountCid <- submit admin $ exerciseCmd bobAccountCid CreateAccount.Create_Cash_Account 
    with 
      description = "Bob Cash Account"
      accountFactoryCid = accountFactoryCid
      holdingFactoryCid = cashHoldingFactoryCid
      observers = [alice]

  let 
    (instrumentId, instrumentVersion) = HoldingSetup.instrumentData
    aliceAccountKey = AccountKey with custodian = admin, owner = alice, id = Id CreateAccount.cashLabel
    bobAccountKey = AccountKey with custodian = admin, owner = bob, id = Id CreateAccount.cashLabel

  aliceRequestCid <- submit alice do
    createCmd CreditCashAccount.Request
      with
        owner = alice
        custodian = admin
        instrument = InstrumentKey with issuer = admin; depository = admin; id = instrumentId; version = instrumentVersion
        amount = 1000.0

  aliceCashHoldingCid <- submit admin do exerciseCmd aliceRequestCid CreditCashAccount.Accept

  -- transferRequestCid <- submit bob do
  --   createCmd CashTransfer.Request
  --     with
  --       receiverAccount = bobAccountKey
  --       instrument = cashInstrument
  --       amount = 800.0
  --       owner = alice
  --       custodian = admin

  -- newHoldingCid <- submitMulti [alice] [public] do exerciseCmd transferRequestCid CashTransfer.Accept with holdingCid = aliceCashHoldingCid

  pure ()
