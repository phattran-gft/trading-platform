module Daml.Trading.Tests.CashTest where 

import Daml.Script 

import Daml.Finance.Interface.Types.Common (InstrumentKey(..), AccountKey(..), Id(..))

import Daml.Trading.Account.CreateAccount qualified as CreateAccount
import Daml.Trading.Account.Account qualified as Account
import Daml.Trading.Cash.CreditCashAccount qualified as CreditCashAccount
import Daml.Trading.Scripts.UserSetup qualified as UserSetup (createUsers)
import Daml.Trading.Scripts.HoldingSetup qualified as HoldingSetup (initialize, instrumentData) 

setup: Script () 
setup = do 
  (public, admin, cashInstrument, accountFactoryCid, 
    cashHoldingFactoryCid, nftHoldingFactoryCid, instrumentFactoryCid, adminHoldingCid) <- HoldingSetup.initialize 
  [alice, bob] <- UserSetup.createUsers public ["Alice", "Bob"]

  aliceRequestCid <- submit alice do
    createCmd CreateAccount.Request
      with
        owner = alice
        custodian = admin
        accountType = Account.Retail 
        username = "alice" 
        realName = "Alice Ackerson" 
        passportNumber = "222222" 
        nationalId = "" 
        address  = "New York" 
  (aliceAccountCid, _) <- submit admin $ exerciseCmd aliceRequestCid CreateAccount.Request_Accept
  aliceAccountCid <- submit admin $ exerciseCmd aliceAccountCid Account.Create_Cash_Account 
    with 
      description = "Alice Cash Account"
      accountFactoryCid = accountFactoryCid
      holdingFactoryCid = cashHoldingFactoryCid
      observers = []

  let 
    (instrumentId, instrumentVersion) = HoldingSetup.instrumentData

  aliceRequestCid <- submit alice do
    createCmd CreditCashAccount.UserRequest
      with
        owner = alice
        custodian = admin
        instrument = cashInstrument
        amount = 1000.0

  (aliceCashHoldingCid,_) <- submit admin do 
    exerciseCmd aliceRequestCid CreditCashAccount.Credit
      with
        holdingCid = adminHoldingCid
  
  pure ()
