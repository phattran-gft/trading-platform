module Daml.Trading.Tests.CashRedemptionTest where

import Daml.Script

import Daml.Finance.Interface.Types.Common (InstrumentKey(..), AccountKey(..), Id(..))
import Daml.Trading.Account.CreateAccount qualified as CreateAccount
import Daml.Trading.Account.Account qualified as Account
import Daml.Trading.Cash.CashTransfer qualified as CashTransfer
import Daml.Trading.Cash.CreditCashAccount qualified as CreditCashAccount
import Daml.Trading.Scripts.UserSetup qualified as UserSetup (createUsers)
import Daml.Trading.Scripts.HoldingSetup qualified as HoldingSetup (initialize, instrumentData) 
import Daml.Trading.Cash.CashRedemption qualified as CashRedemption
import DA.Optional (fromSome)


shouldSuccessfullyRedeemCash: Script ()
shouldSuccessfullyRedeemCash = do
  (public, admin, cashInstrument, accountFactoryCid, 
    cashHoldingFactoryCid, nftHoldingFactoryCid, instrumentFactoryCid, adminHoldingCid) <- HoldingSetup.initialize 
  [alice, bob] <- UserSetup.createUsers public ["Alice", "Bob"]
  
  aliceRequestCid <- submit alice do
    createCmd CreateAccount.Request
      with
        owner = alice
        custodian = admin
        accountType = Account.Retail 
        username = "alice" 
        realName = "Alice Ackerson" 
        passportNumber = "222222" 
        nationalId = "" 
        address  = "New York" 
  (aliceAccountCid, _) <- submit admin $ exerciseCmd aliceRequestCid CreateAccount.Request_Accept
  aliceAccountCid <- submit admin $ exerciseCmd aliceAccountCid Account.Create_Cash_Account 
    with 
      description = "Alice Cash Account"
      accountFactoryCid = accountFactoryCid
      holdingFactoryCid = cashHoldingFactoryCid
      observers = []
  let 
    (instrumentId, instrumentVersion) = HoldingSetup.instrumentData
    aliceAccountKey = AccountKey with custodian = admin, owner = alice, id = Id Account.cashLabel
    adminAccountKey = AccountKey with custodian = admin, owner = admin, id = Id Account.cashLabel
  
  aliceRequestCid <- submit alice do
    createCmd CreditCashAccount.UserRequest
      with
        owner = alice
        custodian = admin
        instrument = InstrumentKey with issuer = admin; depository = admin; id = instrumentId; version = instrumentVersion
        amount = 1000.0

  (aliceCashHoldingCid,adminRemainingOpt) <- submit admin do 
    exerciseCmd aliceRequestCid CreditCashAccount.Credit
      with
        holdingCid = adminHoldingCid

  let 
    adminHoldingCidRemain = fromSome adminRemainingOpt
  
  aliceRequestCid2 <- submit alice do
    createCmd CreditCashAccount.UserRequest
      with
        owner = alice
        custodian = admin
        instrument = InstrumentKey with issuer = admin; depository = admin; id = instrumentId; version = instrumentVersion
        amount = 2000.0

  (aliceCashHoldingCid2,adminRemainingOpt) <- submit admin do 
    exerciseCmd aliceRequestCid2 CreditCashAccount.Credit
      with
        holdingCid = adminHoldingCidRemain
  
  aliceMergeCashHoldingCid <- submit alice do exerciseCmd aliceAccountCid Account.Merge with holdingCids = [aliceCashHoldingCid,aliceCashHoldingCid2]

  aliceRequestWithdrawal <- submit alice do
    createCmd CashRedemption.WithdrawalRequest
      with 
        custodian = admin
        owner = alice
        holdingCid = aliceMergeCashHoldingCid
        amount = 600.0
        instrument = cashInstrument

  aliceHoldingCidRemainOpt <- submit admin do 
    exerciseCmd aliceRequestWithdrawal CashRedemption.Accept

  let 
    aliceHoldingCidRemain = fromSome aliceHoldingCidRemainOpt

  aliceRequestWithdrawal2 <- submit alice do
    createCmd CashRedemption.WithdrawalRequest
      with 
        custodian = admin
        owner = alice
        holdingCid = aliceHoldingCidRemain
        amount = 2400.0
        instrument = cashInstrument

  aliceCashHoldingCidremainingOpt <- submit admin do 
    exerciseCmd aliceRequestWithdrawal2 CashRedemption.Accept

  pure()


shouldFailOnBalanceCheck: Script ()
shouldFailOnBalanceCheck = do
  (public, admin, cashInstrument, accountFactoryCid, 
    cashHoldingFactoryCid, nftHoldingFactoryCid, instrumentFactoryCid, adminHoldingCid) <- HoldingSetup.initialize 
  [alice, bob] <- UserSetup.createUsers public ["Alice", "Bob"]
  
  aliceRequestCid <- submit alice do
    createCmd CreateAccount.Request
      with
        owner = alice
        custodian = admin
        accountType = CreateAccount.Retail 
        username = "alice" 
        realName = "Alice Ackerson" 
        passportNumber = "222222" 
        nationalId = "" 
        address  = "New York" 
  aliceAccountCid <- submit admin $ exerciseCmd aliceRequestCid CreateAccount.Request_Accept
  aliceAccountCid <- submit admin $ exerciseCmd aliceAccountCid CreateAccount.Create_Cash_Account 
    with 
      description = "Alice Cash Account"
      accountFactoryCid = accountFactoryCid
      holdingFactoryCid = cashHoldingFactoryCid
      observers = []
  let 
    (instrumentId, instrumentVersion) = HoldingSetup.instrumentData
    aliceAccountKey = AccountKey with custodian = admin, owner = alice, id = Id CreateAccount.cashLabel
    adminAccountKey = AccountKey with custodian = admin, owner = admin, id = Id CreateAccount.cashLabel
  
  aliceRequestCid <- submit alice do
    createCmd CreditCashAccount.UserRequest
      with
        owner = alice
        custodian = admin
        instrument = InstrumentKey with issuer = admin; depository = admin; id = instrumentId; version = instrumentVersion
        amount = 1000.0

  (aliceCashHoldingCid,adminRemainingOpt) <- submit admin do 
    exerciseCmd aliceRequestCid CreditCashAccount.Credit
      with
        holdingCid = adminHoldingCid

  let 
    adminHoldingCidRemain = fromSome adminRemainingOpt

  aliceRequestWithdrawal <- submit alice do
    createCmd CashRedemption.WithdrawalRequest
      with 
        custodian = admin
        owner = alice
        holdingCid = aliceCashHoldingCid
        amount = 1200.0
        instrument = cashInstrument

  aliceHoldingCidRemainOpt <- submitMustFail admin do 
    exerciseCmd aliceRequestWithdrawal CashRedemption.Accept

  pure()