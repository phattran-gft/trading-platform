module Daml.Trading.Nft.Nft where

import DA.Optional (fromSome)
import DA.Set qualified as S 
import DA.Map (fromList)

import Daml.Finance.Interface.Holding.Account qualified as Account (Credit(..), I, exerciseInterfaceByKey)
import Daml.Finance.Interface.Holding.Base qualified as Holding (I)
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument (K, qty)
import Daml.Finance.Interface.Instrument.Base.Factory qualified as Instrument (Create(..))
import Daml.Finance.Interface.Types.Common (AccountKey(..), Id(..), InstrumentKey(..))
import Daml.Trading.Account.Account (nftLabel, Account)

data PictureType
    = Portrait
    | Landscape
        deriving (Eq, Show)

data Rarity 
    = Common
    | Rare
    | Super_Rare
        deriving (Eq, Show)

nftVersion = "0"

template Request
  with
    owner: Party 
    admin: Party 
    pictureName : Text
    pictureType: PictureType
    pictureDescription: Text
    rarity: Rarity
    royaltyRate: Decimal 
    initialPrice: Decimal 
    observers: S.Set Party 
  where
    signatory owner
    observer admin

    choice Accept : Instrument.K 
      controller admin 
      do
        let 
          accountKey = AccountKey with custodian = admin, owner, id = Id nftLabel
          amount = 1.0
          instrumentKey = InstrumentKey with depository = admin, issuer = admin, id = Id pictureName, version = nftVersion
        (accountCid, account) <- fetchByKey @Account (admin, owner) 

        let 
          (_, _, instrumentFactoryCid, _) = fromSome account.optNftAccount
        now <- getTime 

        exercise instrumentFactoryCid Instrument.Create with 
          instrument = instrumentKey 
          description = pictureDescription 
          validAsOf = now 
          observers = fromList [("InstrumentObserver", S.singleton $ observers)]
        
        nftHoldingCid <- Account.exerciseInterfaceByKey @Account.I accountKey admin Account.Credit
          with
            quantity = Instrument.qty amount instrumentKey

        create Nft with 
          instrumentKey 
          accountKey 
          nftHoldingCid 
          pictureName 
          pictureType 
          pictureDescription 
          rarity 
          royaltyRate 
          issued = now 
          lastPrice = initialPrice 
          observers
        
        pure (instrumentKey)

    choice Decline : ()
      controller admin
      do pure ()

    choice Withdraw : ()
      controller owner
      do pure ()

template Nft 
  with 
    instrumentKey: Instrument.K 
    accountKey: AccountKey 
    nftHoldingCid: ContractId Holding.I 
    pictureName : Text
    pictureType: PictureType
    pictureDescription: Text
    rarity: Rarity
    royaltyRate: Decimal 
    issued: Time 
    lastPrice: Decimal 
    observers: S.Set Party 
  where 
    signatory accountKey.custodian, accountKey.owner 
    observer observers
    -- since each instrumentKey is associated with 1 nft only, we use instrumentKey as key
    key instrumentKey: Instrument.K 
    maintainer key.issuer 
