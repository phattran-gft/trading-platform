module Daml.Trading.Reward.Badge where 

import Daml.Trading.Account.Account qualified as CreateAccount

template ClaimBadgeRequest
   with
    admin : Party
    user : Party
    badge : CreateAccount.BadgeType

  where
    signatory user
    observer admin

    choice Proceed : ()
      controller admin
      do
        (userAccountCid, userAccount) <- fetchByKey @CreateAccount.Account (admin, user)
        let
          rewardPoint = userAccount.rewardPoint

        if rewardPoint >= 20 && badge == CreateAccount.Novice_Trader then do
          exercise userAccountCid CreateAccount.Create_Badge_Account with
            currentRewardPoint = rewardPoint - 20
            badge = CreateAccount.Novice_Trader
          pure()
        else do 
          if rewardPoint >= 100 && badge == CreateAccount.Pro_Trader then do
            abc<-exercise userAccountCid CreateAccount.Create_Badge_Account with
              currentRewardPoint = rewardPoint - 100
              badge = CreateAccount.Pro_Trader
            pure()
          else do
            if rewardPoint >= 1000 && badge == CreateAccount.Hall_of_Fame_Trader then do
              abc<-exercise userAccountCid CreateAccount.Create_Badge_Account with
                currentRewardPoint = rewardPoint - 1000
                badge = CreateAccount.Hall_of_Fame_Trader
              pure()
            else  
              pure()

    choice Cancel : ()
      controller user
      do pure ()

