module Daml.Trading.Reward.TradingPoint where 

import Daml.Trading.Account.Account qualified as Account

calPointAndAmountRemain : Decimal -> (Int, Decimal)
calPointAndAmountRemain tradeAmount = (point, tradePointRemain)
  where 
    point = truncate (tradeAmount / 500.0) 
    tradePointRemain = tradeAmount - intToDecimal(500 * point)

template TradeSuccess
  with
    admin : Party
    seller : Party
    buyer : Party
    tradeAmount : Decimal
    asset : Text
  where 
    signatory admin
    observer seller, buyer
    ensure seller /= buyer
    choice IssueRewardPoint : (ContractId Account.Account, ContractId Account.Account)
      controller admin
      do  
        (sellerTradingPointCid, sellerTradingPoint) <- fetchByKey @Account.Account (admin, seller)
        (buyerTradingPointCid, buyerTradingPoint) <- fetchByKey @Account.Account (admin, buyer)
        let       
          oldSellerTradingPoint = sellerTradingPoint.rewardPoints
          oldBuyerTradingPoint = buyerTradingPoint.rewardPoints
          oldSellerTradeAmountRemain = sellerTradingPoint.tradeAmountRemain
          oldBuyerTradeAmountRemain = buyerTradingPoint.tradeAmountRemain
          (quantityPointBaseTradeAmount, tradeAmountRemainBaseTradeAmount) = calPointAndAmountRemain tradeAmount
          
          newSellerTradeAmountRemain = tradeAmountRemainBaseTradeAmount + oldSellerTradeAmountRemain
          newBuyerTradeAmountRemain = tradeAmountRemainBaseTradeAmount + oldBuyerTradeAmountRemain

          (sellerPoint, tradeAmountRemainSeller) = calPointAndAmountRemain newSellerTradeAmountRemain
          (buyerPoint, tradeAmountRemainBuyer) = calPointAndAmountRemain newBuyerTradeAmountRemain
          sellerQuantityPointAfterCalAmountRemain = oldSellerTradingPoint + quantityPointBaseTradeAmount + sellerPoint
          buyerQuantityPointAfterCalAmountRemain = oldBuyerTradingPoint + quantityPointBaseTradeAmount + buyerPoint

          sellerRewardPoint = sellerQuantityPointAfterCalAmountRemain
          buyerRewardPoint = buyerQuantityPointAfterCalAmountRemain
          sellerAmountRemain = tradeAmountRemainSeller
          buyerAmountRemain = tradeAmountRemainBuyer
              
        
        seller <- exercise sellerTradingPointCid Account.UpdateRewardPoints with
          input_rewardPoints = sellerRewardPoint
          input_tradeAmountRemain = sellerAmountRemain
          ..
          
        buyer <- exercise buyerTradingPointCid Account.UpdateRewardPoints with
          input_rewardPoints = buyerRewardPoint
          input_tradeAmountRemain = buyerAmountRemain
          ..
        -- seller <- create TradingPoint with 
        --     admin = admin
        --     holderRewardPoint = seller
        --     quantity = sellerRewardPoint
        --     tradeAmountRemain = sellerAmountRemain
        -- buyer <- create TradingPoint with 
        --     admin = admin
        --     holderRewardPoint = buyer
        --     quantity = buyerRewardPoint
        --     tradeAmountRemain = buyerAmountRemain 
        pure (seller, buyer)

-- template TradingPoint
--   with
--     admin : Party
--     holderRewardPoint : Party
--     quantity : Int
--     tradeAmountRemain : Decimal
--   where
--     signatory admin
--     observer holderRewardPoint
--     key (admin, holderRewardPoint) : (Party, Party)
--     maintainer key._1



