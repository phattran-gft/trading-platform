module Daml.Trading.Reward.TradingPoint where 

import Daml.Trading.Account.Account qualified as Account
import Daml.Trigger
import DA.List (head)


issueTradingPointTrigger: Trigger ()
issueTradingPointTrigger = Trigger with
  initialize = pure ()
  updateState = \_ -> pure ()
  rule = \_ -> do
    -- [(tradeSuccessCid, tradedata)] <- query @TradeSuccess
    tradedata <- query @TradeSuccess
    let
      tradeSuccessdata = head(tradedata)
      tradeSuccessCid = tradeSuccessdata._1
    pointissue <- dedupExercise tradeSuccessCid IssueRewardPoint
    pure()
    
  registeredTemplates = RegisteredTemplates [registeredTemplate @TradeSuccess]
  heartbeat = None

calPointAndAmountRemain : Decimal -> (Int, Decimal)
calPointAndAmountRemain tradeAmount = (point, tradePointRemain)
  where
    pointRate = Account.configPointsRate
    point = truncate (tradeAmount / pointRate) 
    tradePointRemain = tradeAmount - (pointRate * intToDecimal(point))


template TradeSuccess
  with
    admin : Party
    seller : Party
    buyer : Party
    tradeAmount : Decimal
    asset : Text
  where 
    signatory admin
    observer seller, buyer
    ensure seller /= buyer
    choice IssueRewardPoint : (ContractId Account.Account, ContractId Account.Account)
    -- choice IssueRewardPoint : ()
      controller admin
      do  
        (oldSellerAccountCid, oldSellerAccount) <- fetchByKey @Account.Account (admin, seller)
        (oldBuyerAccountCid, oldBuyerAccount) <- fetchByKey @Account.Account (admin, buyer)
        let       
          (currentPoint, currentTradeAmountRemain) = calPointAndAmountRemain tradeAmount
          
          newSellerTradeAmountRemain = currentTradeAmountRemain + oldSellerAccount.tradeAmountRemain
          newBuyerTradeAmountRemain = currentTradeAmountRemain + oldBuyerAccount.tradeAmountRemain

          (sellerPoint, tradeAmountRemainSeller) = calPointAndAmountRemain newSellerTradeAmountRemain
          (buyerPoint, tradeAmountRemainBuyer) = calPointAndAmountRemain newBuyerTradeAmountRemain
          
          finalSellerPoint = oldSellerAccount.rewardPoints + currentPoint + sellerPoint
          finalBuyerPointt = oldBuyerAccount.rewardPoints + currentPoint + buyerPoint
        
        updateSeller <- exercise oldSellerAccountCid Account.UpdateRewardPoints with
          inputRewardPoints = finalSellerPoint
          inputTradeAmountRemain = tradeAmountRemainSeller
          ..
          
        updateBuyer <- exercise oldBuyerAccountCid Account.UpdateRewardPoints with
          inputRewardPoints = finalBuyerPointt
          inputTradeAmountRemain = tradeAmountRemainBuyer
          ..

        -- pure()
        pure(updateSeller,updateBuyer)


