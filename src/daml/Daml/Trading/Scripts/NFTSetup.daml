module Daml.Trading.Scripts.NFTSetup where

import DA.Map (empty, fromList)
import DA.Set (singleton)
import Daml.Script

import Daml.Finance.Interface.Holding.Factory.Account qualified as Account (F)
import Daml.Finance.Interface.Holding.Factory.Holding qualified as Holding (F)
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument (I)
import Daml.Finance.Interface.Types.Common (Id(..), InstrumentKey(..))

import Daml.Finance.Holding.Account qualified as Account (Factory(..))
import Daml.Finance.Holding.NonFungible qualified as NonFungible (Factory(..))
import Daml.Finance.Instrument.Base.Instrument (Instrument(..))

import Daml.Trading.Account.Account (AccountFactoryReference(..), HoldingFactoryReference(..))
import Daml.Trading.Scripts.UserSetup qualified as UserSetup (getDefaultParties)

instrumentData = (Id "NFT", "0")

initialize : Script CashSetupState
initialize = do 
  [public, admin] <- UserSetup.getDefaultParties 

  accountFactoryCid <- toInterfaceContractId @Account.F <$> submit admin do
    createCmd Account.Factory
      with
        provider = admin
        observers = empty
  submit admin do 
    createCmd AccountFactoryReference 
      with 
        provider = admin 
        accountFactoryCid
  
  nftHoldingFactoryCid <- toInterfaceContractId @Holding.F <$> submit admin do 
    createCmd NonFungible.Factory 
      with 
        provider = admin 
        observers = fromList [("PublicObserver", singleton $ singleton public )] 
  submit admin do 
    createCmd HoldingFactoryReference 
      with 
        provider = admin 
        holdingType = "NonFungible" 
        holdingFactoryCid = nftHoldingFactoryCid 

  let (instrumentId, instrumentVersion) = instrumentData
  now <- getTime

  nftInstrumentCid <- toInterfaceContractId @Instrument.I <$> submit admin do
    createCmd Instrument
      with
        depository = admin
        issuer = admin
        id = instrumentId
        description = "Instrument representing units of NFT"
        version = instrumentVersion
        observers = empty
        validAsOf = now

  let nftInstrument = InstrumentKey with issuer = admin; depository = admin; id = instrumentId; version = instrumentVersion
  

  pure (public, admin, nftInstrument, accountFactoryCid, nftHoldingFactoryCid)

type CashSetupState = (Party, Party, InstrumentKey, ContractId Account.F, ContractId Holding.F)