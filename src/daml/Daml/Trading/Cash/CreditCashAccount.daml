module Daml.Trading.Cash.CreditCashAccount where 

import Daml.Finance.Interface.Holding.Account qualified as Account (Credit(..), I, exerciseInterfaceByKey)
import Daml.Finance.Interface.Holding.Base qualified as Holding (I)
import Daml.Finance.Interface.Instrument.Base.Instrument qualified as Instrument (K, qty)
import Daml.Finance.Interface.Types.Common (AccountKey(..), Id(..))

import Daml.Trading.Account.Account (cashLabel)

template Request
  with
    owner: Party 
    custodian: Party 
    instrument : Instrument.K
    amount : Decimal
  where
    signatory owner
    observer custodian

    ensure amount > 0.0

    choice Accept : ContractId Holding.I
      controller custodian 
      do
        let 
          accountKey = AccountKey with custodian, owner, id = Id cashLabel
        Account.exerciseInterfaceByKey @Account.I accountKey custodian Account.Credit
          with
            quantity = Instrument.qty amount instrument

    choice Decline : ()
      controller custodian
      do pure ()

    choice Withdraw : ()
      controller owner
      do pure ()
