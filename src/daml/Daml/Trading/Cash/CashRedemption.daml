module Daml.Trading.Cash.CashRedemption where 

-- import Daml.Finance.Interface.Holding.Account qualified as Account ( Debit(..), R)
import Daml.Finance.Interface.Holding.Base qualified as Holding (I)
import Daml.Trading.Cash.CashTransfer qualified as CashTransfer
import Daml.Finance.Interface.Types.Common (InstrumentKey(..),AccountKey(..))
import Daml.Trading.Scripts.CashSetup qualified as CashSetup (instrumentData) 

template WithdrawalRequest
    with
        operator : Party
        customer : Party
        holdingCid : ContractId Holding.I
    where
        signatory customer
        observer operator
        choice Accept : ()
            with
                adminWallet : AccountKey
                amount : Decimal
            controller operator
            do
                let
                    (instrumentId, instrumentVersion) = CashSetup.instrumentData
                    cashInstrument = InstrumentKey with issuer = operator; depository = operator; id = instrumentId; version = instrumentVersion
                transferRequest <- create CashTransfer.Request
                    with
                        receiverAccount = adminWallet
                        instrument = cashInstrument
                        amount = amount
                        currentOwner = customer

                adminWallet <- exercise transferRequest CashTransfer.Accept
                    with
                        holdingCid = holdingCid
                -- TODO archive adminWallet
                -- archive adminWallet
            
                pure()

        choice Decline : ()
            controller operator
            do pure ()

        choice Cancel : ()
            controller customer
            do pure ()