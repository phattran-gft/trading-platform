module Daml.Trading.Cash.CreateCashAccount where 

import DA.Map qualified as M (fromList)
import DA.Set qualified as S (fromList, singleton)
import Daml.Finance.Interface.Holding.Factory.Account qualified as Account (Create(..), F)
import Daml.Finance.Interface.Holding.Factory.Holding qualified as Holding (F)
import Daml.Finance.Interface.Types.Common (AccountKey(..), Id(..))

template Request 
  with 
    custodian: Party 
    owner: Party 
  where 
    signatory owner 
    observer custodian 

    choice Accept: AccountKey 
      with 
        label: Text 
        description: Text 
        accountFactoryCid: ContractId Account.F 
        holdingFactoryCid: ContractId Holding.F 
        observers: [Party] 
      controller custodian 
      do
        let
          observersSet = S.fromList $ map S.singleton observers
          accountKey = AccountKey with custodian = custodian, owner = owner, id = Id label

        accountCid <- exercise accountFactoryCid Account.Create with
          account = accountKey
          description = description
          holdingFactoryCid = holdingFactoryCid
          observers = M.fromList [("AccountObservers", observersSet)]

        pure accountKey

    choice Decline : ()
      -- ^ Decline the request.
      controller custodian
      do pure ()

    choice Withdraw : ()
      -- ^ Withdraw the request.
      controller owner
      do pure ()